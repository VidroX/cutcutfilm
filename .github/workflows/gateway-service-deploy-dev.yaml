name: Gateway Service Build and Deploy (DEV)

on:
  push:
    branches: ["dev"]
    paths:
      - "services/gateway/**"
      - ".github/workflows/gateway-service-deploy-dev.yaml"
      - "helm/cutcutfilm-gateway/**"
  workflow_call:
    secrets:
      GIT_REGISTRY_TOKEN:
        required: true
      GIT_USER:
        required: true
      GIT_TOKEN:
        required: true
      KUBECONFIG:
        required: true
  workflow_dispatch:

env:
  WORKING_DIRECTORY: "./services/gateway"
  IMAGE_NAME: "ghcr.io/vidrox/cutcutfilm-gateway:dev"
  RELEASE_NAME: "cutcutfilm-gateway"
  NAMESPACE: "cutcutfilm-dev"
  CHART_LOCATION: helm/cutcutfilm-gateway

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: development
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Compile schema
        env:
          USER_SERVICE_LOCATION: ${{ vars.USER_SERVICE_LOCATION  }}
        run: |
          chmod +x ./compile-schema.sh
          ./compile-schema.sh
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_REGISTRY_TOKEN }}

      - name: Build and push the Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          context: ${{ env.WORKING_DIRECTORY }}
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}-latest
            ${{ env.IMAGE_NAME }}-${{ github.sha }}

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    environment: development
    permissions:
      id-token: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to cluster
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: helm upgrade ${{ env.RELEASE_NAME }} ${{ env.CHART_LOCATION }}/ --install --wait --atomic --namespace=${{ env.NAMESPACE }} --values=${{ env.CHART_LOCATION }}/${{ vars.VALUES_FILE }} --set services.gateway.image=${{ env.IMAGE_NAME }}-${{ github.sha }}
          kubeconfig: '${{ secrets.KUBECONFIG }}'
          overrule_existing_kubeconfig: "true"