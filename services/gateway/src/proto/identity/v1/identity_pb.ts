// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file identity/v1/identity.proto (package identity.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message identity.v1.IssueTokensRequest
 */
export class IssueTokensRequest extends Message<IssueTokensRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<IssueTokensRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.IssueTokensRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueTokensRequest {
    return new IssueTokensRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueTokensRequest {
    return new IssueTokensRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueTokensRequest {
    return new IssueTokensRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueTokensRequest | PlainMessage<IssueTokensRequest> | undefined, b: IssueTokensRequest | PlainMessage<IssueTokensRequest> | undefined): boolean {
    return proto3.util.equals(IssueTokensRequest, a, b);
  }
}

/**
 * @generated from message identity.v1.IssueTokensResponse
 */
export class IssueTokensResponse extends Message<IssueTokensResponse> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string refresh_token = 2;
   */
  refreshToken = "";

  constructor(data?: PartialMessage<IssueTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.IssueTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueTokensResponse {
    return new IssueTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueTokensResponse {
    return new IssueTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueTokensResponse {
    return new IssueTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueTokensResponse | PlainMessage<IssueTokensResponse> | undefined, b: IssueTokensResponse | PlainMessage<IssueTokensResponse> | undefined): boolean {
    return proto3.util.equals(IssueTokensResponse, a, b);
  }
}

/**
 * @generated from message identity.v1.IssueServiceTokenRequest
 */
export class IssueServiceTokenRequest extends Message<IssueServiceTokenRequest> {
  constructor(data?: PartialMessage<IssueServiceTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.IssueServiceTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueServiceTokenRequest {
    return new IssueServiceTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueServiceTokenRequest {
    return new IssueServiceTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueServiceTokenRequest {
    return new IssueServiceTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueServiceTokenRequest | PlainMessage<IssueServiceTokenRequest> | undefined, b: IssueServiceTokenRequest | PlainMessage<IssueServiceTokenRequest> | undefined): boolean {
    return proto3.util.equals(IssueServiceTokenRequest, a, b);
  }
}

/**
 * @generated from message identity.v1.IssueServiceTokenResponse
 */
export class IssueServiceTokenResponse extends Message<IssueServiceTokenResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<IssueServiceTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.IssueServiceTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueServiceTokenResponse {
    return new IssueServiceTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueServiceTokenResponse {
    return new IssueServiceTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueServiceTokenResponse {
    return new IssueServiceTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueServiceTokenResponse | PlainMessage<IssueServiceTokenResponse> | undefined, b: IssueServiceTokenResponse | PlainMessage<IssueServiceTokenResponse> | undefined): boolean {
    return proto3.util.equals(IssueServiceTokenResponse, a, b);
  }
}

/**
 * @generated from message identity.v1.RefreshTokenRequest
 */
export class RefreshTokenRequest extends Message<RefreshTokenRequest> {
  constructor(data?: PartialMessage<RefreshTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.RefreshTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshTokenRequest {
    return new RefreshTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshTokenRequest {
    return new RefreshTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshTokenRequest {
    return new RefreshTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshTokenRequest | PlainMessage<RefreshTokenRequest> | undefined, b: RefreshTokenRequest | PlainMessage<RefreshTokenRequest> | undefined): boolean {
    return proto3.util.equals(RefreshTokenRequest, a, b);
  }
}

/**
 * @generated from message identity.v1.RefreshTokenResponse
 */
export class RefreshTokenResponse extends Message<RefreshTokenResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<RefreshTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.RefreshTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshTokenResponse {
    return new RefreshTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshTokenResponse {
    return new RefreshTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshTokenResponse {
    return new RefreshTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshTokenResponse | PlainMessage<RefreshTokenResponse> | undefined, b: RefreshTokenResponse | PlainMessage<RefreshTokenResponse> | undefined): boolean {
    return proto3.util.equals(RefreshTokenResponse, a, b);
  }
}

/**
 * @generated from message identity.v1.Permission
 */
export class Permission extends Message<Permission> {
  /**
   * @generated from field: string action = 1;
   */
  action = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<Permission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.Permission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Permission {
    return new Permission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJsonString(jsonString, options);
  }

  static equals(a: Permission | PlainMessage<Permission> | undefined, b: Permission | PlainMessage<Permission> | undefined): boolean {
    return proto3.util.equals(Permission, a, b);
  }
}

/**
 * @generated from message identity.v1.GetUserPermissionsResponse
 */
export class GetUserPermissionsResponse extends Message<GetUserPermissionsResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: repeated identity.v1.Permission permissions = 2;
   */
  permissions: Permission[] = [];

  constructor(data?: PartialMessage<GetUserPermissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.GetUserPermissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "message", T: Permission, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserPermissionsResponse {
    return new GetUserPermissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserPermissionsResponse {
    return new GetUserPermissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserPermissionsResponse {
    return new GetUserPermissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserPermissionsResponse | PlainMessage<GetUserPermissionsResponse> | undefined, b: GetUserPermissionsResponse | PlainMessage<GetUserPermissionsResponse> | undefined): boolean {
    return proto3.util.equals(GetUserPermissionsResponse, a, b);
  }
}

/**
 * @generated from message identity.v1.SetUserPermissionsRequest
 */
export class SetUserPermissionsRequest extends Message<SetUserPermissionsRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: repeated string permissions = 2;
   */
  permissions: string[] = [];

  constructor(data?: PartialMessage<SetUserPermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.SetUserPermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetUserPermissionsRequest {
    return new SetUserPermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetUserPermissionsRequest {
    return new SetUserPermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetUserPermissionsRequest {
    return new SetUserPermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetUserPermissionsRequest | PlainMessage<SetUserPermissionsRequest> | undefined, b: SetUserPermissionsRequest | PlainMessage<SetUserPermissionsRequest> | undefined): boolean {
    return proto3.util.equals(SetUserPermissionsRequest, a, b);
  }
}

/**
 * @generated from message identity.v1.UserWithPermissions
 */
export class UserWithPermissions extends Message<UserWithPermissions> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: repeated identity.v1.Permission permissions = 2;
   */
  permissions: Permission[] = [];

  constructor(data?: PartialMessage<UserWithPermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.UserWithPermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "message", T: Permission, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserWithPermissions {
    return new UserWithPermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserWithPermissions {
    return new UserWithPermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserWithPermissions {
    return new UserWithPermissions().fromJsonString(jsonString, options);
  }

  static equals(a: UserWithPermissions | PlainMessage<UserWithPermissions> | undefined, b: UserWithPermissions | PlainMessage<UserWithPermissions> | undefined): boolean {
    return proto3.util.equals(UserWithPermissions, a, b);
  }
}

/**
 * @generated from message identity.v1.SetUserPermissionsResponse
 */
export class SetUserPermissionsResponse extends Message<SetUserPermissionsResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: identity.v1.UserWithPermissions user = 2;
   */
  user?: UserWithPermissions;

  constructor(data?: PartialMessage<SetUserPermissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.SetUserPermissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user", kind: "message", T: UserWithPermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetUserPermissionsResponse {
    return new SetUserPermissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetUserPermissionsResponse {
    return new SetUserPermissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetUserPermissionsResponse {
    return new SetUserPermissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetUserPermissionsResponse | PlainMessage<SetUserPermissionsResponse> | undefined, b: SetUserPermissionsResponse | PlainMessage<SetUserPermissionsResponse> | undefined): boolean {
    return proto3.util.equals(SetUserPermissionsResponse, a, b);
  }
}

/**
 * @generated from message identity.v1.GetUserPermissionsRequest
 */
export class GetUserPermissionsRequest extends Message<GetUserPermissionsRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetUserPermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.GetUserPermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserPermissionsRequest {
    return new GetUserPermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserPermissionsRequest {
    return new GetUserPermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserPermissionsRequest {
    return new GetUserPermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserPermissionsRequest | PlainMessage<GetUserPermissionsRequest> | undefined, b: GetUserPermissionsRequest | PlainMessage<GetUserPermissionsRequest> | undefined): boolean {
    return proto3.util.equals(GetUserPermissionsRequest, a, b);
  }
}

/**
 * @generated from message identity.v1.ValidateUserRequest
 */
export class ValidateUserRequest extends Message<ValidateUserRequest> {
  constructor(data?: PartialMessage<ValidateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.ValidateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateUserRequest {
    return new ValidateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateUserRequest {
    return new ValidateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateUserRequest {
    return new ValidateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateUserRequest | PlainMessage<ValidateUserRequest> | undefined, b: ValidateUserRequest | PlainMessage<ValidateUserRequest> | undefined): boolean {
    return proto3.util.equals(ValidateUserRequest, a, b);
  }
}

/**
 * @generated from message identity.v1.ValidateUserResponse
 */
export class ValidateUserResponse extends Message<ValidateUserResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string token_type = 2;
   */
  tokenType = "";

  /**
   * @generated from field: repeated identity.v1.Permission permissions = 3;
   */
  permissions: Permission[] = [];

  constructor(data?: PartialMessage<ValidateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.ValidateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "permissions", kind: "message", T: Permission, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateUserResponse {
    return new ValidateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateUserResponse {
    return new ValidateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateUserResponse {
    return new ValidateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateUserResponse | PlainMessage<ValidateUserResponse> | undefined, b: ValidateUserResponse | PlainMessage<ValidateUserResponse> | undefined): boolean {
    return proto3.util.equals(ValidateUserResponse, a, b);
  }
}

/**
 * @generated from message identity.v1.GetKeySetRequest
 */
export class GetKeySetRequest extends Message<GetKeySetRequest> {
  constructor(data?: PartialMessage<GetKeySetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.GetKeySetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeySetRequest {
    return new GetKeySetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeySetRequest {
    return new GetKeySetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeySetRequest {
    return new GetKeySetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeySetRequest | PlainMessage<GetKeySetRequest> | undefined, b: GetKeySetRequest | PlainMessage<GetKeySetRequest> | undefined): boolean {
    return proto3.util.equals(GetKeySetRequest, a, b);
  }
}

/**
 * @generated from message identity.v1.GetKeySetResponse
 */
export class GetKeySetResponse extends Message<GetKeySetResponse> {
  /**
   * @generated from field: string encoded_keys = 1;
   */
  encodedKeys = "";

  constructor(data?: PartialMessage<GetKeySetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "identity.v1.GetKeySetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encoded_keys", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeySetResponse {
    return new GetKeySetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeySetResponse {
    return new GetKeySetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeySetResponse {
    return new GetKeySetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeySetResponse | PlainMessage<GetKeySetResponse> | undefined, b: GetKeySetResponse | PlainMessage<GetKeySetResponse> | undefined): boolean {
    return proto3.util.equals(GetKeySetResponse, a, b);
  }
}

