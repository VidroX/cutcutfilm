// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: identity/v1/identity.proto

package identityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/VidroX/cutcutfilm/services/identity/proto/identity/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// IdentityServiceName is the fully-qualified name of the IdentityService service.
	IdentityServiceName = "identity.v1.IdentityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IdentityServiceIssueTokensProcedure is the fully-qualified name of the IdentityService's
	// IssueTokens RPC.
	IdentityServiceIssueTokensProcedure = "/identity.v1.IdentityService/IssueTokens"
	// IdentityServiceRefreshTokenProcedure is the fully-qualified name of the IdentityService's
	// RefreshToken RPC.
	IdentityServiceRefreshTokenProcedure = "/identity.v1.IdentityService/RefreshToken"
	// IdentityServiceSetUserPermissionsProcedure is the fully-qualified name of the IdentityService's
	// SetUserPermissions RPC.
	IdentityServiceSetUserPermissionsProcedure = "/identity.v1.IdentityService/SetUserPermissions"
	// IdentityServiceGetUserPermissionsProcedure is the fully-qualified name of the IdentityService's
	// GetUserPermissions RPC.
	IdentityServiceGetUserPermissionsProcedure = "/identity.v1.IdentityService/GetUserPermissions"
)

// IdentityServiceClient is a client for the identity.v1.IdentityService service.
type IdentityServiceClient interface {
	IssueTokens(context.Context, *connect.Request[v1.IssueTokensRequest]) (*connect.Response[v1.IssueTokensResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	SetUserPermissions(context.Context, *connect.Request[v1.SetUserPermissionsRequest]) (*connect.Response[v1.SetUserPermissionsResponse], error)
	GetUserPermissions(context.Context, *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error)
}

// NewIdentityServiceClient constructs a client for the identity.v1.IdentityService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIdentityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IdentityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &identityServiceClient{
		issueTokens: connect.NewClient[v1.IssueTokensRequest, v1.IssueTokensResponse](
			httpClient,
			baseURL+IdentityServiceIssueTokensProcedure,
			opts...,
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+IdentityServiceRefreshTokenProcedure,
			opts...,
		),
		setUserPermissions: connect.NewClient[v1.SetUserPermissionsRequest, v1.SetUserPermissionsResponse](
			httpClient,
			baseURL+IdentityServiceSetUserPermissionsProcedure,
			opts...,
		),
		getUserPermissions: connect.NewClient[v1.GetUserPermissionsRequest, v1.GetUserPermissionsResponse](
			httpClient,
			baseURL+IdentityServiceGetUserPermissionsProcedure,
			opts...,
		),
	}
}

// identityServiceClient implements IdentityServiceClient.
type identityServiceClient struct {
	issueTokens        *connect.Client[v1.IssueTokensRequest, v1.IssueTokensResponse]
	refreshToken       *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	setUserPermissions *connect.Client[v1.SetUserPermissionsRequest, v1.SetUserPermissionsResponse]
	getUserPermissions *connect.Client[v1.GetUserPermissionsRequest, v1.GetUserPermissionsResponse]
}

// IssueTokens calls identity.v1.IdentityService.IssueTokens.
func (c *identityServiceClient) IssueTokens(ctx context.Context, req *connect.Request[v1.IssueTokensRequest]) (*connect.Response[v1.IssueTokensResponse], error) {
	return c.issueTokens.CallUnary(ctx, req)
}

// RefreshToken calls identity.v1.IdentityService.RefreshToken.
func (c *identityServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// SetUserPermissions calls identity.v1.IdentityService.SetUserPermissions.
func (c *identityServiceClient) SetUserPermissions(ctx context.Context, req *connect.Request[v1.SetUserPermissionsRequest]) (*connect.Response[v1.SetUserPermissionsResponse], error) {
	return c.setUserPermissions.CallUnary(ctx, req)
}

// GetUserPermissions calls identity.v1.IdentityService.GetUserPermissions.
func (c *identityServiceClient) GetUserPermissions(ctx context.Context, req *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error) {
	return c.getUserPermissions.CallUnary(ctx, req)
}

// IdentityServiceHandler is an implementation of the identity.v1.IdentityService service.
type IdentityServiceHandler interface {
	IssueTokens(context.Context, *connect.Request[v1.IssueTokensRequest]) (*connect.Response[v1.IssueTokensResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	SetUserPermissions(context.Context, *connect.Request[v1.SetUserPermissionsRequest]) (*connect.Response[v1.SetUserPermissionsResponse], error)
	GetUserPermissions(context.Context, *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error)
}

// NewIdentityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIdentityServiceHandler(svc IdentityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	identityServiceIssueTokensHandler := connect.NewUnaryHandler(
		IdentityServiceIssueTokensProcedure,
		svc.IssueTokens,
		opts...,
	)
	identityServiceRefreshTokenHandler := connect.NewUnaryHandler(
		IdentityServiceRefreshTokenProcedure,
		svc.RefreshToken,
		opts...,
	)
	identityServiceSetUserPermissionsHandler := connect.NewUnaryHandler(
		IdentityServiceSetUserPermissionsProcedure,
		svc.SetUserPermissions,
		opts...,
	)
	identityServiceGetUserPermissionsHandler := connect.NewUnaryHandler(
		IdentityServiceGetUserPermissionsProcedure,
		svc.GetUserPermissions,
		opts...,
	)
	return "/identity.v1.IdentityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IdentityServiceIssueTokensProcedure:
			identityServiceIssueTokensHandler.ServeHTTP(w, r)
		case IdentityServiceRefreshTokenProcedure:
			identityServiceRefreshTokenHandler.ServeHTTP(w, r)
		case IdentityServiceSetUserPermissionsProcedure:
			identityServiceSetUserPermissionsHandler.ServeHTTP(w, r)
		case IdentityServiceGetUserPermissionsProcedure:
			identityServiceGetUserPermissionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIdentityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIdentityServiceHandler struct{}

func (UnimplementedIdentityServiceHandler) IssueTokens(context.Context, *connect.Request[v1.IssueTokensRequest]) (*connect.Response[v1.IssueTokensResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.IdentityService.IssueTokens is not implemented"))
}

func (UnimplementedIdentityServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.IdentityService.RefreshToken is not implemented"))
}

func (UnimplementedIdentityServiceHandler) SetUserPermissions(context.Context, *connect.Request[v1.SetUserPermissionsRequest]) (*connect.Response[v1.SetUserPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.IdentityService.SetUserPermissions is not implemented"))
}

func (UnimplementedIdentityServiceHandler) GetUserPermissions(context.Context, *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("identity.v1.IdentityService.GetUserPermissions is not implemented"))
}
