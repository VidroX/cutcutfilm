package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/VidroX/cutcutfilm-shared/contextuser"
	sharedErrors "github.com/VidroX/cutcutfilm-shared/errors"
	"github.com/VidroX/cutcutfilm-shared/permissions"
	"github.com/VidroX/cutcutfilm/services/user/core/errors/general"
	"github.com/VidroX/cutcutfilm/services/user/graph"
	"github.com/VidroX/cutcutfilm/services/user/graph/model"
)

// FindUserByID is the resolver for the findUserByID field.
func (r *entityResolver) FindUserByID(ctx context.Context, id string) (*model.User, error) {
	currentUser := contextuser.GetCurrentUserFromContext(ctx)
	canReadRequestedUser := currentUser != nil && (currentUser.HasPermission(permissions.AdminReadPermissionAction) ||
		(currentUser.UserID == id && currentUser.HasPermission(permissions.UserReadSelfPermissionAction)))

	if !canReadRequestedUser {
		return nil, sharedErrors.FormatError(graph.GetLocalizer(ctx), &general.ErrNotEnoughPermissions)
	}

	user, err := r.Resolver.Services.UserService.GetUser(id)

	if err != nil {
		return nil, sharedErrors.FormatError(graph.GetLocalizer(ctx), err)
	}

	return user, nil
}

// Entity returns graph.EntityResolver implementation.
func (r *Resolver) Entity() graph.EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
