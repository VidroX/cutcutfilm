extend schema 
  @link(url: "https://specs.apollo.dev/federation/v2.3", import: ["@key"])

directive @isAuthenticated on FIELD_DEFINITION
directive @hasPermission(permission: String!, fallback: String) on FIELD_DEFINITION|INPUT_FIELD_DEFINITION|ARGUMENT_DEFINITION
directive @hasPermissions(permissions: [String!]!, requireAll: Boolean!, fallback: String) on FIELD_DEFINITION|INPUT_FIELD_DEFINITION|ARGUMENT_DEFINITION
directive @noUser on FIELD_DEFINITION
directive @refreshToken(allowExternal: Boolean!) on FIELD_DEFINITION

"""
Time scalar
"""
scalar Time

"""
Time scalar
"""
scalar Int64

"""
TokenType scalar
"""
scalar TokenType

"""
User model
"""
type User @key(fields: "id") {
  id: ID!
  email: String!
  userName: String!
  registrationDate: Time
  permissions: [Permission]
}

"""
Registration input data for User
"""
input UserRegistrationInput {
  userName: String!
  email: String!
  password: String!
}

"""
User permission
"""
type Permission {
  action: String!
  description: String!
}

"""
Auth token
"""
type Token {
  type: TokenType!
  token: String!
}

"""
Response with User and its auth tokens
"""
type UserWithToken {
  user: User
  accessToken: Token
  refreshToken: Token
}

"""
Input with the new Permissions to set for the given userId
"""
input SetUserPermissionsInput {
  userId: String!
  permissions: [String]!
}

"""
Users list connection
"""
type UsersConnection {
  node: [User]!
  pageInfo: PageInfo!
}

"""
Page information
"""
type PageInfo {
  page: Int!
  resultsPerPage: Int!
  totalResults: Int64!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

"""
Pagination filters
"""
input Pagination {
  page: Int
  resultsPerPage: Int
}

type Query {
  """
  Refresh access token though refresh token provided inside Authorization header
  """
  refreshAccessToken: Token! @refreshToken(allowExternal: false)

  """
  Get currently user info
  """
  user(userId: String): User! @hasPermission(permission: "read:self", fallback: "read:admin")

  """
  Get the list of all users. Admin user is required.
  """
  users(pagination: Pagination): UsersConnection! @hasPermission(permission: "read:admin")
}

type Mutation {
  """
  User login. Unauthenticated user only.
  """
  login(credential: String!, password: String!): UserWithToken! @noUser

  """
  User registration. Unauthenticated user only.
  """
  register(userInfo: UserRegistrationInput!): UserWithToken! @noUser

  """
  Set user permissions. Users with write:admin permission only.
  """
  setUserPermissions(userInfo: SetUserPermissionsInput!): User! @hasPermission(permission: "write:admin")

  """
  Logout user. Refresh token is required.
  """
  logout: Boolean! @refreshToken(allowExternal: true)
}
